{"ast":null,"code":"var _s = $RefreshSig$();\n// Authentication utilities and functions\nimport { useState, useEffect } from 'react';\n\n// Mock user database (in a real app, this would be an API)\nconst mockUsers = [{\n  id: '1',\n  email: 'demo@example.com',\n  password: 'demo123',\n  name: 'Demo User',\n  profile: {\n    name: 'Demo User',\n    age: '28',\n    gender: 'prefer_not_to_say',\n    lifeStage: 'early_career'\n  },\n  scenarios: []\n}];\n\n// Authentication state management\nexport const useAuth = () => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Check for existing session on app load\n    const savedUser = localStorage.getItem('financial_planner_user');\n    if (savedUser) {\n      try {\n        setUser(JSON.parse(savedUser));\n      } catch (error) {\n        console.error('Error parsing saved user:', error);\n        localStorage.removeItem('financial_planner_user');\n      }\n    }\n    setLoading(false);\n  }, []);\n  const login = async (email, password) => {\n    setLoading(true);\n\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 1000));\n\n    // Find user in mock database\n    const foundUser = mockUsers.find(u => u.email === email && u.password === password);\n    if (foundUser) {\n      // Remove password from user object before storing\n      const {\n        password: _,\n        ...userWithoutPassword\n      } = foundUser;\n      setUser(userWithoutPassword);\n      localStorage.setItem('financial_planner_user', JSON.stringify(userWithoutPassword));\n      setLoading(false);\n      return {\n        success: true,\n        user: userWithoutPassword\n      };\n    } else {\n      setLoading(false);\n      return {\n        success: false,\n        error: 'Invalid email or password'\n      };\n    }\n  };\n  const signup = async (email, password, name) => {\n    setLoading(true);\n\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 1000));\n\n    // Check if user already exists\n    const existingUser = mockUsers.find(u => u.email === email);\n    if (existingUser) {\n      setLoading(false);\n      return {\n        success: false,\n        error: 'User with this email already exists'\n      };\n    }\n\n    // Create new user\n    const newUser = {\n      id: Date.now().toString(),\n      email,\n      password,\n      name,\n      profile: {\n        name,\n        age: '',\n        gender: '',\n        lifeStage: ''\n      },\n      scenarios: []\n    };\n\n    // Add to mock database\n    mockUsers.push(newUser);\n\n    // Remove password from user object before storing\n    const {\n      password: _,\n      ...userWithoutPassword\n    } = newUser;\n    setUser(userWithoutPassword);\n    localStorage.setItem('financial_planner_user', JSON.stringify(userWithoutPassword));\n    setLoading(false);\n    return {\n      success: true,\n      user: userWithoutPassword\n    };\n  };\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('financial_planner_user');\n  };\n  const updateUserProfile = profileData => {\n    if (user) {\n      const updatedUser = {\n        ...user,\n        profile: {\n          ...user.profile,\n          ...profileData\n        }\n      };\n      setUser(updatedUser);\n      localStorage.setItem('financial_planner_user', JSON.stringify(updatedUser));\n    }\n  };\n  const updateUserScenarios = scenarios => {\n    if (user) {\n      const updatedUser = {\n        ...user,\n        scenarios\n      };\n      setUser(updatedUser);\n      localStorage.setItem('financial_planner_user', JSON.stringify(updatedUser));\n    }\n  };\n  return {\n    user,\n    loading,\n    login,\n    signup,\n    logout,\n    updateUserProfile,\n    updateUserScenarios,\n    isAuthenticated: !!user\n  };\n};\n\n// Validation utilities\n_s(useAuth, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\nexport const validateEmail = email => {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n};\nexport const validatePassword = password => {\n  return password.length >= 6;\n};\nexport const validateName = name => {\n  return name.trim().length >= 2;\n};\n\n// Form validation helper\nexport const validateLoginForm = (email, password) => {\n  const errors = {};\n  if (!email) {\n    errors.email = 'Email is required';\n  } else if (!validateEmail(email)) {\n    errors.email = 'Please enter a valid email address';\n  }\n  if (!password) {\n    errors.password = 'Password is required';\n  } else if (!validatePassword(password)) {\n    errors.password = 'Password must be at least 6 characters';\n  }\n  return {\n    isValid: Object.keys(errors).length === 0,\n    errors\n  };\n};\nexport const validateSignupForm = (email, password, confirmPassword, name) => {\n  const errors = {};\n  if (!name) {\n    errors.name = 'Name is required';\n  } else if (!validateName(name)) {\n    errors.name = 'Name must be at least 2 characters';\n  }\n  if (!email) {\n    errors.email = 'Email is required';\n  } else if (!validateEmail(email)) {\n    errors.email = 'Please enter a valid email address';\n  }\n  if (!password) {\n    errors.password = 'Password is required';\n  } else if (!validatePassword(password)) {\n    errors.password = 'Password must be at least 6 characters';\n  }\n  if (!confirmPassword) {\n    errors.confirmPassword = 'Please confirm your password';\n  } else if (password !== confirmPassword) {\n    errors.confirmPassword = 'Passwords do not match';\n  }\n  return {\n    isValid: Object.keys(errors).length === 0,\n    errors\n  };\n};","map":{"version":3,"names":["useState","useEffect","mockUsers","id","email","password","name","profile","age","gender","lifeStage","scenarios","useAuth","_s","user","setUser","loading","setLoading","savedUser","localStorage","getItem","JSON","parse","error","console","removeItem","login","Promise","resolve","setTimeout","foundUser","find","u","_","userWithoutPassword","setItem","stringify","success","signup","existingUser","newUser","Date","now","toString","push","logout","updateUserProfile","profileData","updatedUser","updateUserScenarios","isAuthenticated","validateEmail","emailRegex","test","validatePassword","length","validateName","trim","validateLoginForm","errors","isValid","Object","keys","validateSignupForm","confirmPassword"],"sources":["/Users/lighthouse42/Documents/GitHub/kptest/src/auth.js"],"sourcesContent":["// Authentication utilities and functions\nimport { useState, useEffect } from 'react';\n\n// Mock user database (in a real app, this would be an API)\nconst mockUsers = [\n  {\n    id: '1',\n    email: 'demo@example.com',\n    password: 'demo123',\n    name: 'Demo User',\n    profile: {\n      name: 'Demo User',\n      age: '28',\n      gender: 'prefer_not_to_say',\n      lifeStage: 'early_career'\n    },\n    scenarios: []\n  }\n];\n\n// Authentication state management\nexport const useAuth = () => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // Check for existing session on app load\n    const savedUser = localStorage.getItem('financial_planner_user');\n    if (savedUser) {\n      try {\n        setUser(JSON.parse(savedUser));\n      } catch (error) {\n        console.error('Error parsing saved user:', error);\n        localStorage.removeItem('financial_planner_user');\n      }\n    }\n    setLoading(false);\n  }, []);\n\n  const login = async (email, password) => {\n    setLoading(true);\n    \n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    // Find user in mock database\n    const foundUser = mockUsers.find(u => u.email === email && u.password === password);\n    \n    if (foundUser) {\n      // Remove password from user object before storing\n      const { password: _, ...userWithoutPassword } = foundUser;\n      setUser(userWithoutPassword);\n      localStorage.setItem('financial_planner_user', JSON.stringify(userWithoutPassword));\n      setLoading(false);\n      return { success: true, user: userWithoutPassword };\n    } else {\n      setLoading(false);\n      return { success: false, error: 'Invalid email or password' };\n    }\n  };\n\n  const signup = async (email, password, name) => {\n    setLoading(true);\n    \n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    // Check if user already exists\n    const existingUser = mockUsers.find(u => u.email === email);\n    if (existingUser) {\n      setLoading(false);\n      return { success: false, error: 'User with this email already exists' };\n    }\n\n    // Create new user\n    const newUser = {\n      id: Date.now().toString(),\n      email,\n      password,\n      name,\n      profile: {\n        name,\n        age: '',\n        gender: '',\n        lifeStage: ''\n      },\n      scenarios: []\n    };\n\n    // Add to mock database\n    mockUsers.push(newUser);\n    \n    // Remove password from user object before storing\n    const { password: _, ...userWithoutPassword } = newUser;\n    setUser(userWithoutPassword);\n    localStorage.setItem('financial_planner_user', JSON.stringify(userWithoutPassword));\n    setLoading(false);\n    \n    return { success: true, user: userWithoutPassword };\n  };\n\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('financial_planner_user');\n  };\n\n  const updateUserProfile = (profileData) => {\n    if (user) {\n      const updatedUser = {\n        ...user,\n        profile: { ...user.profile, ...profileData }\n      };\n      setUser(updatedUser);\n      localStorage.setItem('financial_planner_user', JSON.stringify(updatedUser));\n    }\n  };\n\n  const updateUserScenarios = (scenarios) => {\n    if (user) {\n      const updatedUser = {\n        ...user,\n        scenarios\n      };\n      setUser(updatedUser);\n      localStorage.setItem('financial_planner_user', JSON.stringify(updatedUser));\n    }\n  };\n\n  return {\n    user,\n    loading,\n    login,\n    signup,\n    logout,\n    updateUserProfile,\n    updateUserScenarios,\n    isAuthenticated: !!user\n  };\n};\n\n// Validation utilities\nexport const validateEmail = (email) => {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n};\n\nexport const validatePassword = (password) => {\n  return password.length >= 6;\n};\n\nexport const validateName = (name) => {\n  return name.trim().length >= 2;\n};\n\n// Form validation helper\nexport const validateLoginForm = (email, password) => {\n  const errors = {};\n  \n  if (!email) {\n    errors.email = 'Email is required';\n  } else if (!validateEmail(email)) {\n    errors.email = 'Please enter a valid email address';\n  }\n  \n  if (!password) {\n    errors.password = 'Password is required';\n  } else if (!validatePassword(password)) {\n    errors.password = 'Password must be at least 6 characters';\n  }\n  \n  return {\n    isValid: Object.keys(errors).length === 0,\n    errors\n  };\n};\n\nexport const validateSignupForm = (email, password, confirmPassword, name) => {\n  const errors = {};\n  \n  if (!name) {\n    errors.name = 'Name is required';\n  } else if (!validateName(name)) {\n    errors.name = 'Name must be at least 2 characters';\n  }\n  \n  if (!email) {\n    errors.email = 'Email is required';\n  } else if (!validateEmail(email)) {\n    errors.email = 'Please enter a valid email address';\n  }\n  \n  if (!password) {\n    errors.password = 'Password is required';\n  } else if (!validatePassword(password)) {\n    errors.password = 'Password must be at least 6 characters';\n  }\n  \n  if (!confirmPassword) {\n    errors.confirmPassword = 'Please confirm your password';\n  } else if (password !== confirmPassword) {\n    errors.confirmPassword = 'Passwords do not match';\n  }\n  \n  return {\n    isValid: Object.keys(errors).length === 0,\n    errors\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}